设计模式六大原则：
1、单一指责原则 描述了一个类职责范围（一个类的职责越单一越好）。
2、里氏替换原则 描述了抽象和具体之间的关系（所有引用了基类的地方都必须能透明地使用子类对象来替代）。
   -----------1）、子类必须完全实现父类的方法
   -----------2）、子类可以有自己的个性
   -----------3）、覆盖或实现父类的方法时输入参数可以被放大   ---->父类作为参数
   -----------4）、覆盖或实现父类的方法时输出结果可以被缩小   ---->具体类作为返回结果
3、依赖倒置原则 描述了模块高层模块和底层模块都应该依赖抽象。
   -----------1）、高层模块不应该依赖底层模块，两者都应该依赖抽象。
   -----------2）、抽象不应该依赖细节。
   -----------3）、细节应该依赖抽象。
   -----------4）、模块间的相互依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或者抽象类产生的。
   -----------5）、接口或者抽象类不依赖于实现类。
   -----------6）、实现类依赖于接口或者抽象类。
4、接口隔离原则 描述了接口的职责范围（接口在合适职能范围内开放的接口越少越好）。
   -----------1）、接口要尽量小。
   -----------2）、接口要高内聚（提高接口、类、模块的处理能力，减少对外的交互）。
   -----------3）、定制服务（职能单一且稳定）。
   -----------4）、接口的设计是有限度的（设计一定要注意适度）。
5、迪米特法则   描述了一个类对外提供的功能或者职责。
   -----------1）、跟直接朋友交流。
   -----------2）、自己的应该就是自己的。
6、开闭原则     对扩展开放，对修改封闭（拥抱变化）。